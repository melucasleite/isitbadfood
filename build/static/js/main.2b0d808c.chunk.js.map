{"version":3,"sources":["constants.js","models/FoodModel.js","components/DecideView.js","components/ResultView.js","App.js","serviceWorker.js","index.js"],"names":["foods","url","question","text","this","DecideView","userFoodUrl","setView","food","Col","xs","Image","maxHeight","src","className","Card","Body","Button","onClick","ResultView","foodId","setArgs","Router","useState","view","args","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAWaA,EAAQ,CACnB,ICZF,aACE,WAAYC,EAAKC,EAAUC,GAAO,oBAChCC,KAAKH,IAAMA,EACXG,KAAKF,SAAWA,EAChBE,KAAKD,KAAOA,KDQd,CATA,yFAWE,2BACA,mC,6BEsBWE,EA9BI,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAC3BC,EAAOR,EAAM,GACnB,OACE,6BACE,kBAACS,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACC,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAKP,KAE/B,kBAACG,EAAA,EAAD,CAAKC,GAAI,GAAII,UAAU,aACrB,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,4BAAKR,EAAKN,UACV,kBAACS,EAAA,EAAD,CAAOE,IAAKL,EAAKP,MACjB,kBAACQ,EAAA,EAAD,CAAKC,GAAI,GAAII,UAAU,aACrB,kBAACG,EAAA,EAAD,CAAQH,UAAU,8BAAlB,MACA,kBAACG,EAAA,EAAD,CACEC,QAAS,WACPX,EFdS,gBEgBXO,UAAU,+BAJZ,a,QCICK,EAnBI,SAAC,GAA+C,IAA7Cb,EAA4C,EAA5CA,YAA+Bc,GAAa,EAA/Bb,QAA+B,EAAtBc,QAAsB,EAAbD,QAC7CZ,EAAOY,EAASpB,EAAMoB,GAAUpB,EAAM,GAC5C,OACE,6BACE,kBAACS,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACC,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAKP,KAE/B,kBAACG,EAAA,EAAD,CAAKC,GAAI,GAAII,UAAU,aACrB,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,wCACA,2BAAIR,EAAKL,WCQrB,IAAMmB,EAAS,SAAC,GAAqB,IAAnBhB,EAAkB,EAAlBA,YAChB,EAAwBiB,mBJlBC,eIkBzB,mBAAOC,EAAP,KAAajB,EAAb,KACA,EAAwBgB,mBAAS,CAAEjB,gBAAnC,mBAAOmB,EAAP,KAAaJ,EAAb,KACA,OAAQG,GACN,IJtBuB,cIuBrB,MACF,IJvBuB,cIwBrB,OAAO,kBAAC,EAAD,iBAAgBC,EAAhB,CAAsBJ,QAASA,EAASd,QAASA,KAC1D,IJxBuB,cIyBrB,OAAO,kBAAC,EAAD,iBAAgBkB,EAAhB,CAAsBJ,QAASA,EAASd,QAASA,KAC1D,QACE,OAAO,gCAIEmB,EA5Bf,WACE,MAAsBH,mBJRtB,0FIQOjB,EAAP,oBACA,OACE,yBAAKQ,UAAU,OACb,yBAAKA,UAAU,YACb,kBAACa,EAAA,EAAD,KACE,kBAAC,EAAD,CAAQrB,YAAaA,QCNXsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b0d808c.chunk.js","sourcesContent":["import { FoodModel } from \"./models/FoodModel\";\n\nexport const ROBBING_WATERMELON_URL =\n  \"https://storage.googleapis.com/is_it_bad_food/1ef7c35c-cc89-11ea-87d0-0242ac130003.png\";\nexport const DEFAULT_FOOD_URL =\n  \"https://storage.googleapis.com/is_it_bad_food/b6eb9fa3-906a-4e11-ad40-6d0d36faa33e.jpg\";\n\nexport const UPLOAD_VIEW = \"upload_view\";\nexport const DECIDE_VIEW = \"decide_view\";\nexport const RESULT_VIEW = \"result_view\";\n\nexport const foods = [\n  new FoodModel(\n    ROBBING_WATERMELON_URL,\n    \"Is your food a criminal?\",\n    \"Yeah, that's some bad*ss food.\"\n  ),\n];\n","export class FoodModel {\n  constructor(url, question, text) {\n    this.url = url;\n    this.question = question;\n    this.text = text;\n  }\n}\n","import React from \"react\";\nimport { foods, RESULT_VIEW } from \"../constants\";\nimport Col from \"react-bootstrap/Col\";\nimport Image from \"react-bootstrap/Image\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\n\nconst DecideView = ({ userFoodUrl, setView }) => {\n  const food = foods[0];\n  return (\n    <div>\n      <Col xs={12}>\n        <Image maxHeight=\"30px\" src={userFoodUrl} />\n      </Col>\n      <Col xs={12} className=\"mt-5 mb-3\">\n        <Card>\n          <Card.Body>\n            <h2>{food.question}</h2>\n            <Image src={food.url} />\n            <Col xs={12} className=\"mt-5 mb-2\">\n              <Button className=\"btn btn-lg btn-danger mr-3\">No</Button>\n              <Button\n                onClick={() => {\n                  setView(RESULT_VIEW);\n                }}\n                className=\"btn btn-lg btn-success ml-3\"\n              >\n                Yes\n              </Button>\n            </Col>\n          </Card.Body>\n        </Card>\n      </Col>\n    </div>\n  );\n};\n\nexport default DecideView;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Image from \"react-bootstrap/Image\";\nimport Card from \"react-bootstrap/Card\";\nimport { foods } from \"../constants\";\n\nconst ResultView = ({ userFoodUrl, setView, setArgs, foodId }) => {\n  const food = foodId ? foods[foodId] : foods[0];\n  return (\n    <div>\n      <Col xs={12}>\n        <Image maxHeight=\"30px\" src={userFoodUrl} />\n      </Col>\n      <Col xs={12} className=\"mt-5 mb-3\">\n        <Card>\n          <Card.Body>\n            <h1>BAD FOOD</h1>\n            <p>{food.text}</p>\n          </Card.Body>\n        </Card>\n      </Col>\n    </div>\n  );\n};\n\nexport default ResultView;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport {\n  DECIDE_VIEW,\n  DEFAULT_FOOD_URL,\n  RESULT_VIEW,\n  UPLOAD_VIEW,\n} from \"./constants\";\nimport DecideView from \"./components/DecideView\";\nimport Container from \"react-bootstrap/Container\";\nimport ResultView from \"./components/ResultView\";\n\nfunction App() {\n  const [userFoodUrl] = useState(DEFAULT_FOOD_URL);\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n        <Container>\n          <Router userFoodUrl={userFoodUrl} />\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nconst Router = ({ userFoodUrl }) => {\n  const [view, setView] = useState(DECIDE_VIEW);\n  const [args, setArgs] = useState({ userFoodUrl });\n  switch (view) {\n    case UPLOAD_VIEW:\n      break;\n    case DECIDE_VIEW:\n      return <DecideView {...args} setArgs={setArgs} setView={setView} />;\n    case RESULT_VIEW:\n      return <ResultView {...args} setArgs={setArgs} setView={setView} />;\n    default:\n      return <div />;\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}